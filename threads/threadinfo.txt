> A thread is an independent path of execution within a program
> Many threads can run concurrently within a program
> All java programs have at least one thread, known as the main thread, which
is created by the JVM at the program's start, when the main() method is invoked
with the main thread

Methods for creating threads
1. Extend thread class and override it's run method
    public Thread()
    public Thread(String name)

2. Implementing Runnable interface (Runnable is an interface with only one abstract method run)
    public Thread(Runnable target)
    public Thread(Runnable target, String name)

Prefer method 2 as you do not have to extend the Thread class in it, rather you can extend some other class, if need be.

Memory Allocation in threads
    > Every thread gets a (mini) stack memory allocated to it within the Stack memory.
    > This (mini) stack is called the thread's stack frame
    > Each stack frame is private to the corresponding thread, and other threads cannot access it

How Threads get execute by the processor
    > The thread pool has various threads with varying priorities.
    > Thread priority ranges from 1 (least) to 10 (highest), with 5 being the default value.
    > Except the main thread's (default) priority, we can alter the priorities of other threads
    > Thread Scheduler is responsible for choosing threads that are then executed by the processor
    > The Thread Scheduler works on a pre-emptive priority scheduling way, meaning it picks the
    thread with highest priority to execute, and can prematurely stop it's execution if a thread
    with higher priority comes in. Starvation is averted by giving a fix time slice to any thread for execution

Thread Join (code in ThreadIntro4.java)
    > Waits for a thread to die
    > The next step in the program won't execute until the thread terminates
    e.g., 
        > A thread to print hello
        > A thread to print world
        > Finally print the message "Thanks for using our software"

Issues with threads (Remember, these issues happen when only one object is to be used by more than one thread at the same time)
    > Thread Interference - happens when two operations, running in different threads, but acting on the same
    data, interleave
    > Memory consistency errors occur when different threads have inconsistent views of what should be the same data

To solve this issue, certain functions can be declared with the synchronized keyword, which locks the (data) object from use by other threads
until the current thread is not done.

A particular object can be locked by a (synchronized) method by only one thread at a time 

With synchronized keyword, the method locks the object, alters it, and releases the lock

Thread.sleep(int milli) is a method that causes the current thread to sleep (pause)
for milli milliseconds, while holding the lock (if synchronized was used).

Apart from synchronized methods, we also have synchronized block(s) of code.

Static synchronized block:
    > Static synchronized methods synchronize on the class
    > If one thread is executing a static synchronized method, all other threads
    trying to execute any static synchronized methods will be blocked
    > Non-static synchronized methods can run in synchronization with a static synchronized method (i.e., in parallel)

wait method
    > Causes the current thread to wait until another thread invokes this method in "the same context (i.e., for the same object)".
    > wait is a method from the Object class and not the Thread class
    > wait method is always used inside a synchronized method/block
    > wait will make the thread release the locks and wait for another thread to wake it up

notify method
    > wakes up a single thread that is waiting on the object's monitor (i.e., any thread that is in wait state for the same object)
    > notify is a method from the Object class and not the Thread class
    > If any threads are waiting on this object, one of the is chosen to be awakened. The choice is arbitrary
    and occurs at the discretion of the Thread Scheduler

notifyAll method
    > wakes up all threads that are waiting on the object's monitor
    > Random thread is then allowed to perform it's action
    > notifyAll is a method from the Object class and not from the Thread class